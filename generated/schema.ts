// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFTContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("spec", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("total_supply", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTContract entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTContract", id.toString(), this);
    }
  }

  static load(id: string): NFTContract | null {
    return changetype<NFTContract | null>(store.get("NFTContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get spec(): string {
    let value = this.get("spec");
    return value!.toString();
  }

  set spec(value: string) {
    this.set("spec", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get icon(): string | null {
    let value = this.get("icon");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set icon(value: string | null) {
    if (!value) {
      this.unset("icon");
    } else {
      this.set("icon", Value.fromString(<string>value));
    }
  }

  get base_uri(): string | null {
    let value = this.get("base_uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set base_uri(value: string | null) {
    if (!value) {
      this.unset("base_uri");
    } else {
      this.set("base_uri", Value.fromString(<string>value));
    }
  }

  get reference(): string | null {
    let value = this.get("reference");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reference(value: string | null) {
    if (!value) {
      this.unset("reference");
    } else {
      this.set("reference", Value.fromString(<string>value));
    }
  }

  get reference_hash(): string | null {
    let value = this.get("reference_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reference_hash(value: string | null) {
    if (!value) {
      this.unset("reference_hash");
    } else {
      this.set("reference_hash", Value.fromString(<string>value));
    }
  }

  get total_supply(): BigInt {
    let value = this.get("total_supply");
    return value!.toBigInt();
  }

  set total_supply(value: BigInt) {
    this.set("total_supply", Value.fromBigInt(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("creator", Value.fromString(""));
    this.set("prev_owner", Value.fromString(""));
    this.set("contract", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get media(): string | null {
    let value = this.get("media");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set media(value: string | null) {
    if (!value) {
      this.unset("media");
    } else {
      this.set("media", Value.fromString(<string>value));
    }
  }

  get media_hash(): string | null {
    let value = this.get("media_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set media_hash(value: string | null) {
    if (!value) {
      this.unset("media_hash");
    } else {
      this.set("media_hash", Value.fromString(<string>value));
    }
  }

  get copies(): BigInt | null {
    let value = this.get("copies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set copies(value: BigInt | null) {
    if (!value) {
      this.unset("copies");
    } else {
      this.set("copies", Value.fromBigInt(<BigInt>value));
    }
  }

  get issued_at(): BigInt | null {
    let value = this.get("issued_at");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set issued_at(value: BigInt | null) {
    if (!value) {
      this.unset("issued_at");
    } else {
      this.set("issued_at", Value.fromBigInt(<BigInt>value));
    }
  }

  get expires_at(): BigInt | null {
    let value = this.get("expires_at");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expires_at(value: BigInt | null) {
    if (!value) {
      this.unset("expires_at");
    } else {
      this.set("expires_at", Value.fromBigInt(<BigInt>value));
    }
  }

  get starts_at(): BigInt | null {
    let value = this.get("starts_at");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set starts_at(value: BigInt | null) {
    if (!value) {
      this.unset("starts_at");
    } else {
      this.set("starts_at", Value.fromBigInt(<BigInt>value));
    }
  }

  get updated_at(): BigInt | null {
    let value = this.get("updated_at");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt | null) {
    if (!value) {
      this.unset("updated_at");
    } else {
      this.set("updated_at", Value.fromBigInt(<BigInt>value));
    }
  }

  get extra(): string | null {
    let value = this.get("extra");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set extra(value: string | null) {
    if (!value) {
      this.unset("extra");
    } else {
      this.set("extra", Value.fromString(<string>value));
    }
  }

  get reference(): string | null {
    let value = this.get("reference");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reference(value: string | null) {
    if (!value) {
      this.unset("reference");
    } else {
      this.set("reference", Value.fromString(<string>value));
    }
  }

  get reference_hash(): string | null {
    let value = this.get("reference_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reference_hash(value: string | null) {
    if (!value) {
      this.unset("reference_hash");
    } else {
      this.set("reference_hash", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get prev_owner(): string {
    let value = this.get("prev_owner");
    return value!.toString();
  }

  set prev_owner(value: string) {
    this.set("prev_owner", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get ownership(): Array<string> | null {
    let value = this.get("ownership");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ownership(value: Array<string> | null) {
    if (!value) {
      this.unset("ownership");
    } else {
      this.set("ownership", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class NFTOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTOwnership entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTOwnership entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTOwnership", id.toString(), this);
    }
  }

  static load(id: string): NFTOwnership | null {
    return changetype<NFTOwnership | null>(store.get("NFTOwnership", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("total_supply_for_owner", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get total_supply_for_owner(): BigInt {
    let value = this.get("total_supply_for_owner");
    return value!.toBigInt();
  }

  set total_supply_for_owner(value: BigInt) {
    this.set("total_supply_for_owner", Value.fromBigInt(value));
  }

  get nftOwnership(): Array<string> | null {
    let value = this.get("nftOwnership");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nftOwnership(value: Array<string> | null) {
    if (!value) {
      this.unset("nftOwnership");
    } else {
      this.set("nftOwnership", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdNfts(): Array<string> | null {
    let value = this.get("createdNfts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set createdNfts(value: Array<string> | null) {
    if (!value) {
      this.unset("createdNfts");
    } else {
      this.set("createdNfts", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Activity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Activity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Activity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Activity", id.toString(), this);
    }
  }

  static load(id: string): Activity | null {
    return changetype<Activity | null>(store.get("Activity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get mintBy(): string | null {
    let value = this.get("mintBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mintBy(value: string | null) {
    if (!value) {
      this.unset("mintBy");
    } else {
      this.set("mintBy", Value.fromString(<string>value));
    }
  }

  get burnBy(): string | null {
    let value = this.get("burnBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set burnBy(value: string | null) {
    if (!value) {
      this.unset("burnBy");
    } else {
      this.set("burnBy", Value.fromString(<string>value));
    }
  }

  get transferFrom(): string | null {
    let value = this.get("transferFrom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferFrom(value: string | null) {
    if (!value) {
      this.unset("transferFrom");
    } else {
      this.set("transferFrom", Value.fromString(<string>value));
    }
  }

  get transferTo(): string | null {
    let value = this.get("transferTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferTo(value: string | null) {
    if (!value) {
      this.unset("transferTo");
    } else {
      this.set("transferTo", Value.fromString(<string>value));
    }
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
